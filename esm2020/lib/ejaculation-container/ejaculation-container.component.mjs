import { Attribute, Component, Input, Optional, ViewChild } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
var mode;
(function (mode) {
    mode[mode["NORMAL"] = 0] = "NORMAL";
    mode[mode["MINI"] = 1] = "MINI";
    mode[mode["EXTRAMINI"] = 2] = "EXTRAMINI";
})(mode || (mode = {}));
;
const MINI_SIZE_ATR = 'mat-mini-fab';
const EXTRA_MINI_SIZE_ATR = 'mat-extra-mini-fab';
const SDW_CLR = "rgba(0,0,0,0.5)";
const VIEW_CFG = ({
    [mode.NORMAL]: { wdh: 62, hgt: 79, mrx1: 0.208, mrx4: 0.208, mrx5: -24, mrx6: -27, ofstVrt: -30, ofstHor: -5 },
    [mode.MINI]: { wdh: 44, hgt: 56, mrx1: 0.148, mrx4: 0.148, mrx5: -17, mrx6: -19, ofstVrt: -16, ofstHor: 0 },
    [mode.EXTRAMINI]: { wdh: 32, hgt: 40, mrx1: 0.105, mrx4: 0.105, mrx5: -12, mrx6: -13, ofstVrt: -11, ofstHor: 2 },
});
const SVG_PATH = "M 279.6380310058594 133.36993408203125 " +
    "C 210.131591796875 133.5400390625 153.7141571044922 187.43788146972656 129.13217163085938 285.9844970703125 " +
    "C 109.89353942871094 363.1101989746094 112.97976684570312 503.7231750488281 143.8748779296875 505.3211975097656 " +
    "C 179.50111389160156 507.1639404296875 172.5738525390625 433.8542175292969 277.1315002441406 392.29327392578125 " +
    "C 373.069580078125 354.15850830078125 404.0740051269531 331.1825866699219 411.0225524902344 258.3337097167969 " +
    "C 415.041259765625 185.6850128173828 351.48028564453125 133.42515563964844 279.6380310058594 133.36993408203125 Z";
export class EjaculationContainerComponent {
    constructor(isMini, isExMini) {
        this.color = "primary";
        this.view_mode = mode.NORMAL;
        this.getSvgBackColor = () => window.getComputedStyle(this.mainRef.nativeElement).backgroundColor;
        this.getSvgColor = () => window.getComputedStyle(this.mainRef.nativeElement).color;
        this.getSvgPath = () => SVG_PATH;
        this.getSdwColor = () => SDW_CLR;
        this.getSvgWidth = (wthOfset = false) => VIEW_CFG[this.view_mode].wdh + (wthOfset ? VIEW_CFG[this.view_mode].ofstHor : 0);
        this.getSvgHeight = (wthOfset = false) => VIEW_CFG[this.view_mode].hgt + (wthOfset ? VIEW_CFG[this.view_mode].ofstVrt : 0);
        this.getSvgTransform = () => "matrix("
            + VIEW_CFG[this.view_mode].mrx1 + ",0,0,"
            + VIEW_CFG[this.view_mode].mrx4 + ","
            + VIEW_CFG[this.view_mode].mrx5 + ","
            + VIEW_CFG[this.view_mode].mrx6 +
            ")";
        this.view_mode = (isMini == undefined)
            ? (isExMini == undefined)
                ? mode.NORMAL
                : mode.EXTRAMINI
            : mode.MINI;
    }
    ngOnInit() {
    }
}
EjaculationContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.11", ngImport: i0, type: EjaculationContainerComponent, deps: [{ token: MINI_SIZE_ATR, attribute: true, optional: true }, { token: EXTRA_MINI_SIZE_ATR, attribute: true, optional: true }], target: i0.ɵɵFactoryTarget.Component });
EjaculationContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.11", type: EjaculationContainerComponent, selector: "app-ejaculation-container", inputs: { color: "color" }, viewQueries: [{ propertyName: "mainRef", first: true, predicate: ["main"], descendants: true, static: true }], ngImport: i0, template: "<div #main [ngClass]=\"color\" style=\"visibility:collapse\" ></div>\r\n<span [style.height.px] = \"getSvgHeight()\"  [style.width.px] = \"getSvgWidth()\" class=\"ejac-container\" > \r\n    <div class=\"ejac-pic\"  > \r\n        <!-- [style.height.px] = \"getSvgHeight()\" -->\r\n        <svg [attr.height] = \"getSvgHeight()\" [attr.width] =\"getSvgWidth()\" [attr.stroke]=\"getSvgBackColor()\" [attr.fill] = \"getSvgBackColor()\" >\r\n            <!-- <filter id=\"blur\">\r\n                <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"10\" />\r\n            </filter>\r\n            <path  [attr.stroke]=\"getSdwColor()\" [attr.fill] = \"getSdwColor()\"  [attr.d] = \"getSvgPath()\" [attr.transform] = \"getSvgTransform()\" filter=\"url(#blur)\" /> -->\r\n            <path [attr.d] = \"getSvgPath()\" [attr.transform] = \"getSvgTransform()\"  />\r\n        </svg>\r\n    </div>\r\n    <div [style.height.px] = \"getSvgHeight(true)\"  [style.width.px] = \"getSvgWidth(true)\"  class=\"ejac-cnt\" [ngClass]=\"color\" >\r\n        <ng-content></ng-content>\r\n    </div>\r\n</span>\r\n\r\n", styles: [".ejac-container{position:relative;background-color:transparent;display:inline-block;overflow:visible}.ejac-pic{background:transparent;z-index:1;position:absolute;top:0;left:0;overflow:visible}.ejac-cnt{right:0;z-index:2;display:flex;justify-content:center;align-items:center;position:absolute;background:transparent}\n"], dependencies: [{ kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.11", ngImport: i0, type: EjaculationContainerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-ejaculation-container', template: "<div #main [ngClass]=\"color\" style=\"visibility:collapse\" ></div>\r\n<span [style.height.px] = \"getSvgHeight()\"  [style.width.px] = \"getSvgWidth()\" class=\"ejac-container\" > \r\n    <div class=\"ejac-pic\"  > \r\n        <!-- [style.height.px] = \"getSvgHeight()\" -->\r\n        <svg [attr.height] = \"getSvgHeight()\" [attr.width] =\"getSvgWidth()\" [attr.stroke]=\"getSvgBackColor()\" [attr.fill] = \"getSvgBackColor()\" >\r\n            <!-- <filter id=\"blur\">\r\n                <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"10\" />\r\n            </filter>\r\n            <path  [attr.stroke]=\"getSdwColor()\" [attr.fill] = \"getSdwColor()\"  [attr.d] = \"getSvgPath()\" [attr.transform] = \"getSvgTransform()\" filter=\"url(#blur)\" /> -->\r\n            <path [attr.d] = \"getSvgPath()\" [attr.transform] = \"getSvgTransform()\"  />\r\n        </svg>\r\n    </div>\r\n    <div [style.height.px] = \"getSvgHeight(true)\"  [style.width.px] = \"getSvgWidth(true)\"  class=\"ejac-cnt\" [ngClass]=\"color\" >\r\n        <ng-content></ng-content>\r\n    </div>\r\n</span>\r\n\r\n", styles: [".ejac-container{position:relative;background-color:transparent;display:inline-block;overflow:visible}.ejac-pic{background:transparent;z-index:1;position:absolute;top:0;left:0;overflow:visible}.ejac-cnt{right:0;z-index:2;display:flex;justify-content:center;align-items:center;position:absolute;background:transparent}\n"] }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Attribute,
                    args: [MINI_SIZE_ATR]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Attribute,
                    args: [EXTRA_MINI_SIZE_ATR]
                }] }]; }, propDecorators: { color: [{
                type: Input
            }], mainRef: [{
                type: ViewChild,
                args: ['main', { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,